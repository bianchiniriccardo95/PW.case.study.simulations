# Prova simulazione tesi finale master BARC
library("MASS")
library("MatchIt")
library("WeightIt")
library("cobalt")
library("readxl")
library("survey")
library("data.table")
library("ggplot2")
library("doParallel")
library("doSNOW")
library("tidyverse")
library("ggpubr")
library("truncnorm")
library("parallel")
library("future")
no_cores <- availableCores() - 1
plan(multisession, workers = no_cores)
seed <- 42
#https://github.com/jmk7cj/Covariate-Balance/blob/main/code.R da dove ho preso spunto per qualcosa

# Funzioni----

#1) Simulare le covariate

def_baseline <- function(n, mus, sds, corr_matrix) {
  
  assertive::assert_is_a_number(n)
  assertive::assert_is_numeric(mus)
  assertive::assert_is_numeric(sds)
  assertive::assert_is_symmetric_matrix(corr_matrix)
  
  cov_matrix <- Matrix::nearPD(corr_matrix)$mat * (sds %*% t(sds))
  
  mv_norm <- MASS::mvrnorm(n = n, mu = mus, Sigma = cov_matrix)
  
  
  mv_norm[, 1] <- ifelse(mv_norm[, 1] > 0, 1, 0) #Gender
  mv_norm[, 2] <- ifelse(mv_norm[, 2] > -0.25, 1, 0) #Education
  mv_norm[, 3] <- ifelse(mv_norm[, 3] > 0.7, 1, 0) #Smoking
  mv_norm[,4] <- ifelse(mv_norm[, 4] > 1.45, 1, 0) #DM
  mv_norm[,5] <- ifelse(mv_norm[, 5] > 1.4, 1, 0) #CVD 
  mv_norm[,6] <- ifelse(mv_norm[, 6] > 0.55, 1, 0) #Hypertension
  mv_norm[,7] <- ifelse(mv_norm[, 7] > 1.03, 1, 0) #Albuminuria
  
  
  colnames(mv_norm) <- glue::glue("x{1:ncol(mv_norm)}")
  
  mv_norm
  
}

#2) Stimare la probabilità di ricevere il trattamento sulla base delle covariate che ho simulato

define_p_treat <- function(int, smd, baseline_covariates) {
  logit_treat <- int + smd * baseline_covariates[,1] + smd * baseline_covariates[,2] + smd*baseline_covariates[,3] + smd * baseline_covariates[,4] + smd* baseline_covariates[,5] + smd*baseline_covariates[,6] + smd * baseline_covariates[,7] + smd * baseline_covariates[,8] + smd*baseline_covariates[,9]
  prob_treat <- exp(logit_treat)/(1 + exp(logit_treat))
  prob_treat
}

#3) Stimare l'intercetta del modello di regressione logistica per ottenere una determinata prevalenza di trattati

bisection <- function(treatment_prevalence,lower = -500, upper = 500, maxError = 0.0001, maxIter = 10000, baseline_covariates, smd){
  a <- lower
  b <- upper
  s <- smd
  iter <- 0
  cov <- baseline_covariates
  
  treat_a <- define_p_treat(int = a, smd = s, baseline_covariates = cov)
  treat_b <- define_p_treat(int = b, smd = s, baseline_covariates = cov)
  c <- (a+b) / 2
  
  prob_treat_a <- mean(rbinom(nrow(cov), 1, treat_a))
  prob_treat_b <- mean(rbinom(nrow(cov),1, treat_b))
  
  diff_a <- abs(prob_treat_a - treatment_prevalence)
  diff_b <- abs(prob_treat_b - treatment_prevalence)
  
  while(iter <= maxIter) {
    c <- (a+b) / 2
    treat_c <- define_p_treat(int = c, smd = s, baseline_covariates = cov)
    prob_treat_c <- mean(rbinom(nrow(cov),1, treat_c))
    if(abs(prob_treat_c - treatment_prevalence) < maxError) {
      break
    }
    
    fa <- define_p_treat(int = a, baseline_covariates = cov, smd = s)
    fb <- define_p_treat(int = b, baseline_covariates = cov, smd = s)
    
    prob_treat_a <- mean(rbinom(nrow(cov),1,fa))
    prob_treat_b <- mean(rbinom(nrow(cov),1,fb))
    
    diff_a <- prob_treat_a - treatment_prevalence
    diff_c <- prob_treat_c - treatment_prevalence
    
    if(sign(diff_c) == sign(diff_a)) {
      a <- c
    } else {
      b <- c
    }
    
    iter <- iter+1
  }
  
  #if(iter >= maxIter) {
  #print(c)
  #stop("Search failed. Increase number of iterations")
  #}
  
  return(c)
  
}


# Definizione delle baseline covariates--------------------

set.seed(42)

mus <- c(rep(0,7L),55,26) #Ogni variabile avrà media 0, tranne per le variabili age e BMI simulate
sds <- c(rep(1,7L), 11, 4) #Ogni variabile avrà sd 1

#Estrazione della matrice di correlazione
file_name <- "~/Desktop/Università/Master Padova/Biostatistica Avanzata per la Ricerca Clinica/Project Work/statin_use_bis.xlsx"
statin_db <- read_excel(file_name, sheet = 1)
categorical_variables <- c('Gender', 'Education', 'Smoking' ,'DM', 'CVD', 'Hypertension', 'Albuminuria_1')
statin_db_sim_data <- statin_db %>% 
  mutate(Education = ifelse(Education == 2 | Education == 3, 1, 0),
         Smoking = ifelse(Smoking == -1, 0, Smoking))
corr_matrix <- round(cor(as.matrix((statin_db_sim_data[,c(categorical_variables,'Age', 'BMI')]))),1) #Estrazione della matrice di correlazione
c(mean(statin_db$RFFT), summary(lm(RFFT ~ Gender + Education + Smoking + DM + CVD + Hypertension + Albuminuria_1 + Age + BMI, data = statin_db))$coefficients[2:10]) -> b #simulazione variabile di outcome
treatment_effect <- -0.2


baseline_covariates <- def_baseline(n = 4000, mus = mus, sds = sds, corr_matrix = corr_matrix)

# Simulo diversi "sbilanciamenti delle covariate", treatment prevalence 0.22

smds <- c(0.05, 0.18, 0.3, 0.5)
set.seed(42)
ps_plots <- map(
  smds,
  ~ {
    intercept <- bisection(treatment_prevalence = 0.22, baseline_covariates = baseline_covariates, smd = .x)
    prob_treat <- define_p_treat(int = intercept, smd = .x, baseline_covariates = baseline_covariates)
    treats <- rbinom(nrow(baseline_covariates), 1, prob_treat)
    simulated_dataset <- as.data.frame(baseline_covariates) %>% 
      mutate(treatment = factor(treats))
    ps <- weightit(treatment ~ x1 +x2 +x3+x4+x5+x6+x7+x8+x9, data = simulated_dataset, method = 'ps')$ps
    simulated_dataset <- simulated_dataset %>% mutate(ps = ps)
    ggplot(data = simulated_dataset, aes(x = ps, fill = treatment)) + geom_density(alpha = .5) + theme_bw() + labs(x = 'Propensity score', y = 'Density')
  }
) %>% set_names(., nm = glue::glue("Gamma:{smds}"))

ggarrange(plotlist = ps_plots, common.legend = T, nrow = 2, ncol = 2)
ps_plots[[2]]

# Treatment_prevalence 0.22, smd = 0.18, crude estimator
set.seed(42)
smd_0.18_crude_summary <- map(
  1:1000L,
  ~ {
    baseline_covariates <- def_baseline(n = 4000, mus = mus, sds = sds, corr_matrix = corr_matrix)
    intercept <- bisection(treatment_prevalence = 0.22, smd = 0.18, baseline_covariates = baseline_covariates)
    prob_treat <- define_p_treat(int = intercept, smd = 0.18, baseline_covariates = baseline_covariates)
    treats <- rbinom(nrow(baseline_covariates), 1, prob_treat)
    simulated_dataset <- as.data.frame(baseline_covariates) %>% 
      mutate(treatment = factor(treats))
    bal_tab <- bal.tab(weightit(treatment ~ x1+x2+x3+x4+x5+x6+x7+x8+x9, data = simulated_dataset), un = T, abs = TRUE, stats = c('mean.diffs','variance.ratios'))
    unbalanced_smd <- bal_tab$Balance[2:nrow(bal_tab$Balance), 'Diff.Un']
    y_0 <- rnorm(nrow(simulated_dataset), (b[1] + treatment_effect * 0 + b[2] * baseline_covariates[,1] + b[3] * baseline_covariates[,2] +b[4] * baseline_covariates[,3] +b[5] * baseline_covariates[,4] +b[6] * baseline_covariates[,5] +b[7] * baseline_covariates[,6] +b[8] * baseline_covariates[,7] +b[9] * baseline_covariates[,8] +b[10] * baseline_covariates[,9] ), 1)
    y_1 <- rnorm(nrow(simulated_dataset), (b[1] + treatment_effect * 1 + b[2] * baseline_covariates[,1] + b[3] * baseline_covariates[,2] +b[4] * baseline_covariates[,3] +b[5] * baseline_covariates[,4] +b[6] * baseline_covariates[,5] +b[7] * baseline_covariates[,6] +b[8] * baseline_covariates[,7] +b[9] * baseline_covariates[,8] +b[10] * baseline_covariates[,9] ), 1)
    simulated_dataset <- simulated_dataset %>% 
      mutate(y0 = y_0, y1 = y_1) %>% 
      mutate(y_observed = ifelse(treatment == 0, y0, y1))
    list(
      imabalance_smd = unbalanced_smd, #smd delle diverse covariate in ogni dataset
      results_ate = summary(lm(y_observed ~ treatment, data = simulated_dataset))
    )
    
  }, .progress = TRUE
)

#Stima dell'imbalance
imbalance_df <- data.frame()
for(i in 1:length(smd_0.18_crude_summary)){
  imb_data <- smd_0.18_crude_summary[[i]][[1]]
  imbalance_df <- rbind(imbalance_df, imb_data)
}

averaged_smd_crude <- mean(colMeans(imbalance_df))

#Stima del bias e dell'RMSE, e del NC
ate_estimates <- map_dbl(smd_0.18_crude_summary, ~{
  ate_results <- .x$results_ate
  ate_results$coefficients[2]})
bias_0.18_crude <- mean(ate_estimates) - treatment_effect
rmse_0.18_crude <- sqrt((sd(ate_estimates)^2) + bias_0.18_crude^2)

conf_int_crude <- tibble(
  `LOWER.CI` = quantile(ate_estimates, probs = 0.025),
  `Estimate` = median(ate_estimates),
  `UPPER.CI` = quantile(ate_estimates, probs = 0.975),
)

smd_0.18_results <- list(
  average_smd_crude = averaged_smd_crude,
  ate_estimates_crude = ate_estimates,
  bias_crude = bias_0.18_crude,
  rmse_crude = rmse_0.18_crude,
  conf_int_ate_estimate = conf_int_crude
)

save(smd_0.18_results, file = "~/Desktop/Università/Master Padova/Biostatistica Avanzata per la Ricerca Clinica/Project Work/simulation_treat_prevalence_0.22_smd_0.1_8_2.RData")



# Treatment_prevalence 0.22, smd = 0.18, trimming at 0.9
set.seed(42)
smd_0.18_ipw_trimming0.9_summary <- map(
  1:1000L,
  ~ {
    baseline_covariates <- def_baseline(n = 4000, mus = mus, sds = sds, corr_matrix = corr_matrix)
    intercept <- bisection(treatment_prevalence = 0.22, smd = 0.18, baseline_covariates = baseline_covariates)
    prob_treat <- define_p_treat(int = intercept, smd = 0.18, baseline_covariates = baseline_covariates)
    treats <- rbinom(nrow(baseline_covariates), 1, prob_treat)
    simulated_dataset <- as.data.frame(baseline_covariates) %>% 
      mutate(treatment = factor(treats))
    weightit_ipw <- weightit(treatment ~ x1 + x2 +x3 +x4+x5+x6+x7+x8+x9, data = simulated_dataset, estimand = 'ATE', method = 'ps')
    y_0 <- rnorm(nrow(simulated_dataset), (b[1] + treatment_effect * 0 + b[2] * baseline_covariates[,1] + b[3] * baseline_covariates[,2] +b[4] * baseline_covariates[,3] +b[5] * baseline_covariates[,4] +b[6] * baseline_covariates[,5] +b[7] * baseline_covariates[,6] +b[8] * baseline_covariates[,7] +b[9] * baseline_covariates[,8] +b[10] * baseline_covariates[,9] ), 1)
    y_1 <- rnorm(nrow(simulated_dataset), (b[1] + treatment_effect * 1 + b[2] * baseline_covariates[,1] + b[3] * baseline_covariates[,2] +b[4] * baseline_covariates[,3] +b[5] * baseline_covariates[,4] +b[6] * baseline_covariates[,5] +b[7] * baseline_covariates[,6] +b[8] * baseline_covariates[,7] +b[9] * baseline_covariates[,8] +b[10] * baseline_covariates[,9] ), 1)
    simulated_dataset <- simulated_dataset %>% 
      mutate(y0 = y_0, y1 = y_1) %>% 
      mutate(y_observed = ifelse(treatment == 0, y0, y1))
    simulated_dataset_wt <- simulated_dataset %>% mutate(wts = weightit_ipw$weights)
    simulated_dataset_wt <- simulated_dataset_wt %>% mutate(wts_trimmed = trim(simulated_dataset_wt$wts, at = .9, treat = simulated_dataset_wt$treatment))
    svy <- svydesign(ids = ~ 1, weights = ~ wts_trimmed, data = simulated_dataset_wt)
    bal_tab <- bal.tab(x = simulated_dataset_wt[,c(1:9)], weights = simulated_dataset_wt$wts_trimmed, s.d.denom = 'pooled', treat = simulated_dataset_wt$treatment, un = T, abs = TRUE, stats = c('mean.diffs','variance.ratios'))
    ipw_balanced_smd <- bal_tab$Balance[2:nrow(bal_tab$Balance), 'Diff.Adj']
    list(
      ipw_balance_smd = ipw_balanced_smd, #smd delle diverse covariate in ogni dataset
      results_ate = summary(svyglm(y_observed ~ treatment, design = svy, family = gaussian()))
    )
    
  }, .progress = TRUE
)

balanced_df_trimming_0.9 <- data.frame()
for(i in 1:length(smd_0.18_ipw_trimming0.9_summary)){
  b_data <- smd_0.18_ipw_trimming0.9_summary[[i]][[1]]
  balanced_df_trimming_0.9 <- rbind(balanced_df_trimming_0.9, b_data)
}

averaged_smd_ipw_0.9 <- mean(colMeans(balanced_df_trimming_0.9))

#Stima del bias e dell'RMSE, e del NC
ate_estimates_ipw_0.9 <- map_dbl(smd_0.18_ipw_trimming0.9_summary, ~{
  ate_results <- .x$results_ate
  ate_results$coefficients[2]})
bias_0.18_trimming_0.9 <- mean(ate_estimates_ipw_0.9) - treatment_effect
rmse_0.18_trimming_0.9 <- sqrt((sd(ate_estimates_ipw_0.9)^2) + bias_0.18_trimming_0.9^2)

conf_int_ipw_0.9 <- tibble(
  `LOWER.CI` = quantile(ate_estimates_ipw_0.9, probs = 0.025),
  `Estimate` = median(ate_estimates_ipw_0.9),
  `UPPER.CI` = quantile(ate_estimates_ipw_0.9, probs = 0.975),
)

smd_0.18_ipw0.9_results <- list(
  average_smd_ipw_0.9 = averaged_smd_ipw_0.9,
  ate_estimates_crude = ate_estimates_ipw_0.9,
  bias_crude = bias_0.18_trimming_0.9,
  rmse_crude = rmse_0.18_trimming_0.9,
  conf_int_ate_estimate = conf_int_ipw_0.9
)


save(smd_0.18_ipw0.9_results, file = "~/Desktop/Università/Master Padova/Biostatistica Avanzata per la Ricerca Clinica/Project Work/simulation_treat_prevalence_0.22_smd_0.18_ipw_trim_0._9_2.RData")


# Treatment_prevalence 0.22, smd = 0.18, trimming at 0.95

set.seed(42)
smd_0.18_ipw_trimming0.95_summary <- map(
  1:1000L,
  ~ {
    baseline_covariates <- def_baseline(n = 4000, mus = mus, sds = sds, corr_matrix = corr_matrix)
    intercept <- bisection(treatment_prevalence = 0.22, smd = 0.18, baseline_covariates = baseline_covariates)
    prob_treat <- define_p_treat(int = intercept, smd = 0.18, baseline_covariates = baseline_covariates)
    treats <- rbinom(nrow(baseline_covariates), 1, prob_treat)
    simulated_dataset <- as.data.frame(baseline_covariates) %>% 
      mutate(treatment = factor(treats))
    weightit_ipw <- weightit(treatment ~ x1 + x2 +x3 +x4+x5+x6+x7+x8+x9, data = simulated_dataset, estimand = 'ATE', method = 'ps')
    y_0 <- rnorm(nrow(simulated_dataset), (b[1] + treatment_effect * 0 + b[2] * baseline_covariates[,1] + b[3] * baseline_covariates[,2] +b[4] * baseline_covariates[,3] +b[5] * baseline_covariates[,4] +b[6] * baseline_covariates[,5] +b[7] * baseline_covariates[,6] +b[8] * baseline_covariates[,7] +b[9] * baseline_covariates[,8] +b[10] * baseline_covariates[,9] ), 1)
    y_1 <- rnorm(nrow(simulated_dataset), (b[1] + treatment_effect * 1 + b[2] * baseline_covariates[,1] + b[3] * baseline_covariates[,2] +b[4] * baseline_covariates[,3] +b[5] * baseline_covariates[,4] +b[6] * baseline_covariates[,5] +b[7] * baseline_covariates[,6] +b[8] * baseline_covariates[,7] +b[9] * baseline_covariates[,8] +b[10] * baseline_covariates[,9] ), 1)
    simulated_dataset <- simulated_dataset %>% 
      mutate(y0 = y_0, y1 = y_1) %>% 
      mutate(y_observed = ifelse(treatment == 0, y0, y1))
    simulated_dataset_wt <- simulated_dataset %>% mutate(wts = weightit_ipw$weights)
    simulated_dataset_wt <- simulated_dataset_wt %>% mutate(wts_trimmed = trim(simulated_dataset_wt$wts, at = .95, treat = simulated_dataset_wt$treatment))
    svy <- svydesign(ids = ~ 1, weights = ~ wts_trimmed, data = simulated_dataset_wt)
    bal_tab <- bal.tab(x = simulated_dataset_wt[,c(1:9)], weights = simulated_dataset_wt$wts_trimmed, s.d.denom = 'pooled', treat = simulated_dataset_wt$treatment, un = T, abs = TRUE, stats = c('mean.diffs','variance.ratios'))
    ipw_balanced_smd <- bal_tab$Balance[2:nrow(bal_tab$Balance), 'Diff.Adj']
    list(
      ipw_balance_smd = ipw_balanced_smd, #smd delle diverse covariate in ogni dataset
      results_ate = summary(svyglm(y_observed ~ treatment, design = svy, family = gaussian()))
    )
    
  }, .progress = TRUE
)

balanced_df_trimming_0.95 <- data.frame()
for(i in 1:length(smd_0.18_ipw_trimming0.95_summary)){
  b_data <- smd_0.18_ipw_trimming0.95_summary[[i]][[1]]
  balanced_df_trimming_0.95 <- rbind(balanced_df_trimming_0.95, b_data)
}

averaged_smd_ipw_0.95 <- mean(colMeans(balanced_df_trimming_0.95))

#Stima del bias e dell'RMSE, e del NC
ate_estimates_ipw_0.95 <- map_dbl(smd_0.18_ipw_trimming0.95_summary, ~{
  ate_results <- .x$results_ate
  ate_results$coefficients[2]})
bias_0.18_trimming_0.95 <- mean(ate_estimates_ipw_0.95) - treatment_effect
rmse_0.18_trimming_0.95 <- sqrt((sd(ate_estimates_ipw_0.95)^2) + bias_0.18_trimming_0.95^2)

conf_int_ipw_0.95 <- tibble(
  `LOWER.CI` = quantile(ate_estimates_ipw_0.95, probs = 0.025),
  `Estimate` = median(ate_estimates_ipw_0.95),
  `UPPER.CI` = quantile(ate_estimates_ipw_0.95, probs = 0.975),
)

smd_0.18_ipw0.95_results <- list(
  average_smd_ipw_0.95 = averaged_smd_ipw_0.95,
  ate_estimates_ipw_0.95 = ate_estimates_ipw_0.95,
  bias_ipw_0.95 = bias_0.18_trimming_0.95,
  rmse_ipw_0.95 = rmse_0.18_trimming_0.95,
  conf_int_ate_estimate = conf_int_ipw_0.95
)

save(smd_0.18_ipw0.95_results, file = "~/Desktop/Università/Master Padova/Biostatistica Avanzata per la Ricerca Clinica/Project Work/simulation_treat_prevalence_0.22_smd_0.18_ipw_trim_0.95_2.RData")


# Treatment_prevalence 0.22, smd = 0.18, trimming at 0.99

set.seed(42)
smd_0.18_ipw_trimming0.99_summary <- map(
  1:1000L,
  ~ {
    baseline_covariates <- def_baseline(n = 4000, mus = mus, sds = sds, corr_matrix = corr_matrix)
    intercept <- bisection(treatment_prevalence = 0.22, smd = 0.18, baseline_covariates = baseline_covariates)
    prob_treat <- define_p_treat(int = intercept, smd = 0.18, baseline_covariates = baseline_covariates)
    treats <- rbinom(nrow(baseline_covariates), 1, prob_treat)
    simulated_dataset <- as.data.frame(baseline_covariates) %>% 
      mutate(treatment = factor(treats))
    weightit_ipw <- weightit(treatment ~ x1 + x2 +x3 +x4+x5+x6+x7+x8+x9, data = simulated_dataset, estimand = 'ATE', method = 'ps')
    y_0 <- rnorm(nrow(simulated_dataset), (b[1] + treatment_effect * 0 + b[2] * baseline_covariates[,1] + b[3] * baseline_covariates[,2] +b[4] * baseline_covariates[,3] +b[5] * baseline_covariates[,4] +b[6] * baseline_covariates[,5] +b[7] * baseline_covariates[,6] +b[8] * baseline_covariates[,7] +b[9] * baseline_covariates[,8] +b[10] * baseline_covariates[,9] ), 1)
    y_1 <- rnorm(nrow(simulated_dataset), (b[1] + treatment_effect * 1 + b[2] * baseline_covariates[,1] + b[3] * baseline_covariates[,2] +b[4] * baseline_covariates[,3] +b[5] * baseline_covariates[,4] +b[6] * baseline_covariates[,5] +b[7] * baseline_covariates[,6] +b[8] * baseline_covariates[,7] +b[9] * baseline_covariates[,8] +b[10] * baseline_covariates[,9] ), 1)
    simulated_dataset <- simulated_dataset %>% 
      mutate(y0 = y_0, y1 = y_1) %>% 
      mutate(y_observed = ifelse(treatment == 0, y0, y1))
    simulated_dataset_wt <- simulated_dataset %>% mutate(wts = weightit_ipw$weights)
    simulated_dataset_wt <- simulated_dataset_wt %>% mutate(wts_trimmed = trim(simulated_dataset_wt$wts, at = .99, treat = simulated_dataset_wt$treatment))
    svy <- svydesign(ids = ~ 1, weights = ~ wts_trimmed, data = simulated_dataset_wt)
    bal_tab <- bal.tab(x = simulated_dataset_wt[,c(1:9)], weights = simulated_dataset_wt$wts_trimmed, s.d.denom = 'pooled', treat = simulated_dataset_wt$treatment, un = T, abs = TRUE, stats = c('mean.diffs','variance.ratios'))
    ipw_balanced_smd <- bal_tab$Balance[2:nrow(bal_tab$Balance), 'Diff.Adj']
    list(
      ipw_balance_smd = ipw_balanced_smd, #smd delle diverse covariate in ogni dataset
      results_ate = summary(svyglm(y_observed ~ treatment, design = svy, family = gaussian()))
    )
    
  }, .progress = TRUE
)

balanced_df_trimming_0.99 <- data.frame()
for(i in 1:length(smd_0.18_ipw_trimming0.99_summary)){
  b_data <- smd_0.18_ipw_trimming0.99_summary[[i]][[1]]
  balanced_df_trimming_0.99 <- rbind(balanced_df_trimming_0.99, b_data)
}

averaged_smd_ipw_0.99 <- mean(colMeans(balanced_df_trimming_0.99))

#Stima del bias e dell'RMSE, e del NC
ate_estimates_ipw_0.99 <- map_dbl(smd_0.18_ipw_trimming0.99_summary, ~{
  ate_results <- .x$results_ate
  ate_results$coefficients[2]})
bias_0.18_trimming_0.99 <- mean(ate_estimates_ipw_0.99) - treatment_effect
rmse_0.18_trimming_0.99 <- sqrt((sd(ate_estimates_ipw_0.99)^2) + bias_0.18_trimming_0.99^2)

conf_int_ipw_0.99 <- tibble(
  `LOWER.CI` = quantile(ate_estimates_ipw_0.99, probs = 0.025),
  `Estimate` = median(ate_estimates_ipw_0.99),
  `UPPER.CI` = quantile(ate_estimates_ipw_0.99, probs = 0.975),
)

smd_0.18_ipw0.99_results <- list(
  average_smd_ipw_0.99 = averaged_smd_ipw_0.99,
  ate_estimates_ipw_0.99 = ate_estimates_ipw_0.99,
  bias_ipw_0.99 = bias_0.18_trimming_0.99,
  rmse_ipw_0.99 = rmse_0.18_trimming_0.99,
  conf_int_ate_estimate = conf_int_ipw_0.99
)

save(smd_0.18_ipw0.99_results, file = "~/Desktop/Università/Master Padova/Biostatistica Avanzata per la Ricerca Clinica/Project Work/simulation_treat_prevalence_0.22_smd_0.18_ipw_trim_0.99_2.RData")







# Treatment_prevalence 0.22, smd = 0.18, overlap weighting

set.seed(42)
smd_0.18_ow_summary <- map(
  1:1000L,
  ~ {
    baseline_covariates <- def_baseline(n = 4000, mus = mus, sds = sds, corr_matrix = corr_matrix)
    intercept <- bisection(treatment_prevalence = 0.22, smd = 0.18, baseline_covariates = baseline_covariates)
    prob_treat <- define_p_treat(int = intercept, smd = 0.18, baseline_covariates = baseline_covariates)
    treats <- rbinom(nrow(baseline_covariates), 1, prob_treat)
    simulated_dataset <- as.data.frame(baseline_covariates) %>% 
      mutate(treatment = factor(treats))
    weightit_ow <- weightit(treatment ~ x1 + x2 +x3 +x4+x5+x6+x7+x8+x9, data = simulated_dataset, estimand = 'ATO', method = 'ps')
    bal_tab <- bal.tab(weightit_ow, un = T, abs = TRUE, stats = c('mean.diffs','variance.ratios'))
    ow_balanced_smd <- bal_tab$Balance[2:nrow(bal_tab$Balance), 'Diff.Adj']
    y_0 <- rnorm(nrow(simulated_dataset), (b[1] + treatment_effect * 0 + b[2] * baseline_covariates[,1] + b[3] * baseline_covariates[,2] +b[4] * baseline_covariates[,3] +b[5] * baseline_covariates[,4] +b[6] * baseline_covariates[,5] +b[7] * baseline_covariates[,6] +b[8] * baseline_covariates[,7] +b[9] * baseline_covariates[,8] +b[10] * baseline_covariates[,9] ), 1)
    y_1 <- rnorm(nrow(simulated_dataset), (b[1] + treatment_effect * 1 + b[2] * baseline_covariates[,1] + b[3] * baseline_covariates[,2] +b[4] * baseline_covariates[,3] +b[5] * baseline_covariates[,4] +b[6] * baseline_covariates[,5] +b[7] * baseline_covariates[,6] +b[8] * baseline_covariates[,7] +b[9] * baseline_covariates[,8] +b[10] * baseline_covariates[,9] ), 1)
    simulated_dataset <- simulated_dataset %>% 
      mutate(y0 = y_0, y1 = y_1) %>% 
      mutate(y_observed = ifelse(treatment == 0, y0, y1))
    simulated_dataset_wt <- simulated_dataset %>% mutate(wts = weightit_ow$weights)
    svy <- svydesign(ids = ~ 1, weights = ~ wts, data = simulated_dataset_wt)
    list(
      ow_balance_smd = ow_balanced_smd, #smd delle diverse covariate in ogni dataset
      results_ate = summary(svyglm(y_observed ~ treatment, design = svy, family = gaussian()))
    )
    
  }, .progress = TRUE
)

balanced_df_ow <- data.frame()
for(i in 1:length(smd_0.18_ow_summary)){
  b_data <- smd_0.18_ow_summary[[i]][[1]]
  balanced_df_ow <- rbind(balanced_df_ow, b_data)
}

averaged_smd_ow <- mean(colMeans(balanced_df_ow))

#Stima del bias e dell'RMSE, e del NC
ate_estimates_ow <- map_dbl(smd_0.18_ow_summary, ~{
  ate_results <- .x$results_ate
  ate_results$coefficients[2]})
bias_0.18_ow <- mean(ate_estimates_ow) - treatment_effect
rmse_0.18_ow <- sqrt((sd(ate_estimates_ow)^2) + bias_0.18_ow^2)

conf_int_ow <- tibble(
  `LOWER.CI` = quantile(ate_estimates_ow, probs = 0.025),
  `Estimate` = median(ate_estimates_ow),
  `UPPER.CI` = quantile(ate_estimates_ow, probs = 0.975),
)

smd_0.18_ow_results <- list(
  average_smd_ow = averaged_smd_ow,
  ate_estimates_ow = ate_estimates_ow,
  bias_ow = bias_0.18_ow,
  rmse_ow = rmse_0.18_ow,
  conf_int_ate_estimate = conf_int_ow
)

save(smd_0.18_ow_results, file = "~/Desktop/Università/Master Padova/Biostatistica Avanzata per la Ricerca Clinica/Project Work/simulation_treat_prevalence_0.22_smd_0.18_ow_2.RData")

